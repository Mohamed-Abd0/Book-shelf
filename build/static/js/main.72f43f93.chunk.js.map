{"version":3,"sources":["BooksAPI.js","Components/Book.js","pages/Search.js","Components/Shelf.js","pages/Home.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","Book","bookInfo","onMoveBook","className","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","e","target","disabled","title","authors","Search_page","data","useState","searchResult","setSearchResult","onChangeHandler","a","query","maxResults","BookAPI","books","console","log","error","matchedBooks","map","matched_book","filter","b","to","type","placeholder","Shelf","name","Home_page","shelfs_names","App","catigorizedBooks","setCatigorizedBooks","get_books","useEffect","moveBook","booksAPI","path","element","Home","Search","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72f43f93.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\nlet token = localStorage.token;\r\n\r\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\n// get the spacific book \r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.book);\r\n\r\n\r\n  \r\n// get all books on my shelfs \r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n\r\n\r\n// move the selected book to selected shelf and get the updated shelfes \r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then((res) => res.json());\r\n\r\n\r\n\r\n// search on a book in the server and get the result\r\nexport const search = (query, maxResults) =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query, maxResults }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n","\r\n\r\n\r\n\r\nconst Book = ({bookInfo , onMoveBook })=>{\r\n\r\n\r\n    const onChangeHandler =  (e) =>{\r\n        const shelf  = e.target.value;\r\n        \r\n        // lift the state up to rerender the app\r\n        onMoveBook(bookInfo , shelf)\r\n    };\r\n\r\n    return(\r\n        <li>\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    <div\r\n                    className=\"book-cover\"\r\n                    style={{\r\n                        width: 128,\r\n                        height: 193,\r\n                        backgroundImage: \r\n                        (bookInfo.imageLinks !== null && bookInfo.imageLinks !== 0 && bookInfo.imageLinks)  ?\r\n                         `url(${bookInfo.imageLinks.thumbnail})`\r\n                        :\r\n                        `url(https://via.placeholder.com/128x192/000000/FFFFFF/?text=no-image)`\r\n                    }}\r\n                    ></div>\r\n                \r\n                    <div className=\"book-shelf-changer\">\r\n                        <select value={bookInfo.shelf} onChange={onChangeHandler}>\r\n                            <option value=\"none\" disabled>Move to...</option>\r\n                            <option value=\"currentlyReading\">Currently Reading</option>\r\n                            <option value=\"wantToRead\">Want to Read</option>\r\n                            <option value=\"read\">Read</option>\r\n                            <option value=\"none\">None</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-title\">{ bookInfo.title } </div>\r\n                <div className=\"book-authors\"> { bookInfo.authors }\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n};\r\nexport default Book;","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as BookAPI from \"../BooksAPI\";\r\nimport Book from \"../Components/Book\";\r\n\r\n\r\nconst Search_page = ({ data , onMoveBook })=>{\r\n\r\n    \r\n    const [searchResult , setSearchResult ] = useState([]);\r\n\r\n\r\n    \r\n    const onChangeHandler = async (e)=>{\r\n        if (e.target.value === \"\"){\r\n            setSearchResult([]);\r\n        }else{\r\n            const  res= await BookAPI.search(e.target.value)\r\n            // check on the response \r\n            console.log( \"this data come from the server after search\" , res);\r\n            // handling the  error response\r\n            (res.error) ? (setSearchResult([])) : setSearchResult(res) ;\r\n             \r\n        }\r\n        \r\n    };\r\n\r\n    if(data[0]){\r\n    \r\n\r\n        /*\r\n            {match the receved books with the books on my shelfs} \r\n\r\n        if the book come from the search exist on my shelfs => give it it`s shelf \r\n        if the book  does not  exist on my shelfs           => give it none \r\n\r\n         */\r\n        let matchedBooks =  searchResult.map((book)=>{\r\n            let matched_book =  ( data.filter((b)=> book.id===b.id));\r\n            if(matched_book[0]){\r\n                return matched_book[0]\r\n            }else{\r\n                let modified_book = {...book , shelf:\"none\"}\r\n                return modified_book\r\n            }\r\n        })\r\n\r\n        // check the matchedBooks\r\n        console.log(\"this data after matching\" , matchedBooks)\r\n\r\n        \r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to={\"/\"} className=\"close-search\"/>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search by title, author, or ISBN\"\r\n                            onChange={onChangeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                        {\r\n                        (matchedBooks[0])?\r\n                        (matchedBooks.map((book)=> <Book key={book.id} bookInfo={book} onMoveBook={onMoveBook}/>))\r\n                        :\r\n                        (<li> please enter valid name</li>)\r\n                        }   \r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        )\r\n    }else{\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Search_page;","\r\nimport Book from \"./Book\";\r\n\r\n\r\nconst Shelf= ({books , name , onMoveBook })=>{\r\n    \r\n\r\n\r\n    return(\r\n        <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{name}</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    \r\n                    {books.map((book)=>( <Book key={book.id} bookInfo={book} onMoveBook={onMoveBook} /> ))};\r\n                        \r\n                </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default Shelf;","\r\nimport Shelf from \"../Components/Shelf\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Home_page = ({data , onMoveBook })=>{\r\n    \r\n    const shelfs_names = ['currentlyReading' , 'wantToRead' , 'read']\r\n\r\n    // check if the data is full or embty \r\n    if( data[0] ){\r\n        return(\r\n            <div className=\"list-books\">\r\n                <div className=\"list-books-title\">\r\n                    <h1>MyReads</h1>\r\n                </div>\r\n                <div className=\"list-books-content\">\r\n                    <Shelf books= {data.filter(b=>b.shelf === shelfs_names[0])} name={shelfs_names[0]} onMoveBook={onMoveBook}/>\r\n                    <Shelf books= {data.filter(b=>b.shelf === shelfs_names[1])} name={shelfs_names[1]} onMoveBook={onMoveBook}/>\r\n                    <Shelf books= {data.filter(b=>b.shelf === shelfs_names[2])} name={shelfs_names[2]} onMoveBook={onMoveBook}/>\r\n                </div>\r\n                <div className=\"open-search\">\r\n                    <Link to={\"/search\"}/>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }else{\r\n        return null\r\n    }\r\n\r\n};\r\n\r\nexport default Home_page;","import \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport * as  booksAPI from \"./BooksAPI\";\r\nimport SearchPage from \"./pages/Search\";\r\nimport HomePage from \"./pages/Home\";\r\nimport {Routes , Route} from \"react-router-dom\"\r\n\r\nfunction App() {\r\n\r\n  // define a state of catigurized books array  \r\n  const [catigorizedBooks , setCatigorizedBooks]= useState([]);\r\n\r\n\r\n\r\n  // get the all books on my shelfs\r\n  const get_books = async ()=>{\r\n    const res = await booksAPI.getAll();\r\n    setCatigorizedBooks(res)\r\n\r\n    // check the data come from the server\r\n    console.log( \"this data come from the server after using getAll() \" , res)\r\n\r\n  } \r\n\r\n\r\n\r\n  useEffect(()=>{\r\n    // invoke get_books function to get the data \r\n    get_books(); \r\n\r\n    console.log(\"I am here in useEffect\")\r\n    \r\n  },[]);\r\n  \r\n\r\n\r\n  // move the book to the selected shelf and get the the updated shelfs\r\n  const moveBook = async (bookInfo , shelf)=>{\r\n\r\n    // move the selected book to the wanted shelf\r\n    await booksAPI.update(bookInfo , shelf );\r\n\r\n    // get the updated data after moving the book and rerender the app\r\n    get_books();\r\n  }\r\n\r\n \r\n  return (\r\n    <div className=\"app\">\r\n      <Routes>\r\n        <Route path=\"/\"       element= {<HomePage  data={catigorizedBooks} onMoveBook={moveBook} />} />\r\n        <Route path=\"/search\" element={<SearchPage data={catigorizedBooks} onMoveBook={moveBook}/>} />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport {BrowserRouter} from \"react-router-dom\"\r\n\r\nReactDOM.render(\r\n  // to listen to the url change\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n  ,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}